{"name":"Semantic-grid","tagline":"A semantic CSS grid using SASS","body":"#Semantic Grid\r\n\r\nA semantic CSS grid that uses mixins to apply column-related styles to HTML\r\nelements.\r\n\r\n#Table of Contents:\r\n  - [Prerequisites](#prerequisites)\r\n  - [See it in Action](#see-it-in-action)\r\n  - [Features](#features)\r\n  - [Configuring the Grid](#configuring-the-grid)\r\n      - [Max Grid Width](#max-grid-width)\r\n      - [Number of Columns](#number-of-columns)\r\n      - [Gutter Width](#gutter-width)\r\n  - [Configuring the Columns](#configuring-the-columns)\r\n      - [Width](#width)\r\n      - [Collapse Gutters](#collapse-gutters)\r\n      - [Force Column Position](#force-column-position)\r\n      - [\"Push\" or \"Pull\" a Column](#push-or-pull-a-column)\r\n  - [Frequently-Asked Questions](#frequently-asked-questions)\r\n      - [Why Use Mixins Instead of Classes?](#why-use-mixins-instead-of-classes)\r\n\r\n# Prerequisites\r\n  Semantic Grid was compiled using SASS 3.4.21\r\n\r\n# See it in Action\r\n\r\nAn example page demonstrating _almost_ every feature of the grid can be found\r\n[here](/semantic-grid/examples/index.html).\r\n\r\n# Features\r\n\r\nSemantic Grid is easy to use, highly configurable, and doesn't require\r\nnon-semantic CSS classes to use. Highly flexible configuration options control:\r\n\r\n  - Column Position\r\n  - Column widths\r\n  - Gutter Width\r\n  - Max grid width\r\n  - Number of columns\r\n\r\n## Configuring the Grid\r\nThe following aspects of the grid can bedynamically configured at run-time:\r\n\r\n### Max Grid Width\r\n\r\n__config option__: ``max-grid-width``\r\n__default value:__ ``960px``\r\n\r\nThis is how large the grid should get to accommodate the content. Once the\r\nscreen's width exceeds this value, the grid will stop expanding and center\r\nitself on the page.\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n$grid-config: (\r\n  // The max-width of the grid\r\n  max-grid-width: 960px,\r\n  ...\r\n);\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n...\r\n```\r\n\r\n### Number of Columns\r\n\r\n__config option__: ``num-columns``\r\n__default value:__ ``12``\r\n\r\nThis is how many columns a single \"row\" can contain and it's the number that\r\nis used when calculating column widths.\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n$grid-config: (\r\n  // Override the default number of columns\r\n  num-columns: 16,\r\n  ...\r\n);\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n...\r\n```\r\n\r\n### Gutter Width\r\n\r\n__config option__: ``gutter-width``\r\n__default value:__ ``12px``\r\n\r\nThis is how many pixels of padding get added to the top, left, and bottom of\r\neach column.\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n$grid-config: (\r\n  // Override the default gutter width\r\n  gutter-width: 8px,\r\n  ...\r\n);\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n...\r\n```\r\n\r\n## Configuring the Columns\r\n\r\nThe following aspects of a column can be configured:\r\n\r\n### Width\r\n\r\nThis parameter specifies how many column-widths the element being styled\r\nshould span. The value can range from 1 to the number specified in\r\n``$num-columns``.\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n\r\n.my-first-column {\r\n  @column(6); // Given a 12 column grid, this will span 50% of its container\r\n}\r\n...\r\n```\r\n\r\n### Collapse Gutters\r\n\r\n__config option__: ``collapse``\r\n__default value__: ``none``\r\n\r\nThis config option collapses one or more gutters on a given column by removing\r\nthe padding.\r\n\r\nPossible values: ``none``, ``all``, ``top``, ``left``, ``bottom``\r\n\r\n``right`` is not an option because columns do not have a right gutter.\r\n\r\nIf ``none`` or ``all`` are specified, any following collapse options will\r\nbe ignored.\r\n\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n\r\n.my-first-column {\r\n  @column(6, (collapse: top bottom)); // Remove top and bottom padding\r\n}\r\n...\r\n```\r\n\r\n### Force Column Position\r\n\r\n__config option__: ``force``\r\n__default value__: ``none``\r\n\r\nThere are times where a column needs to be rendered in a way it would otherwise\r\nnot given the surrounding markup. For example to force a three-column layout\r\nwhere the last two columns are aligned in the center of the page and to the\r\nright, respectively but the sum of all the column's widths don't add up to the\r\nnumber of columns in the grid. In this example, we have three columns, each\r\ntwo column-widths wide that make up the parts of a company slogan:\r\n\r\n```html\r\n<div class = \"page__company-slogan\">\r\n  <div class=\"slogan slogan--phrase-1\">\r\n    <span class=\"sample-content\"></span>\r\n  </div>\r\n  <div class=\"slogan slogan--phrase-2\">\r\n    <span class=\"sample-content\"></span>\r\n  </div>\r\n  <div class=\"slogan slogan--phrase-3\">\r\n    <span class=\"sample-content\"></span>\r\n  </div>\r\n</div>\r\n```\r\n\r\n```sass\r\n.page__company-slogan {\r\n  @extend %clearfix;\r\n  clear: both;\r\n  display: block;\r\n  height: 50px;\r\n  .slogan {\r\n    @include column(2);\r\n    height: 100%;\r\n    &--phrase-2 {\r\n      @include column(2, (force: 'right'));\r\n    }\r\n    &--phrase-3  {\r\n      @include column(2, (force: 'center'));\r\n    }\r\n  }\r\n}\r\n...\r\n```\r\n\r\nHere, the second part of the slogan will be forced to the right side of the\r\npage, the first part will be on the left, and the third part will be on the\r\nright.\r\n\r\n### A Note About Source Order\r\nThe order in which the slogan phrases are shifted right and\r\ncenter is intentional. Placing floated elements (those on the left and right)\r\nbefore non-floated elements (centered) forces them to appear at the same\r\nposition vertically and allows the non-floated element to float _up_ and fill\r\nthe remaining space between the two floated elements. In order to center a\r\ncolumn between other non-centered columns, the non-centered columns need to\r\nappear in the source code before the centered column does.\r\n\r\n### \"Push\" or \"Pull\" a Column\r\n\r\n__config option__: ``push`` and ``pull``\r\n__default value__: ``0``\r\n\r\nThe ``push`` and ``pull`` config options can be used to force a column away\r\nfrom the left (``push``) and right (``pull``) side of the pages a given number\r\nof column widths without resorting to inserting empty column-related markup\r\nbefore or after the affected column.\r\n\r\n```sass\r\n//// Styles.scss\r\n\r\n@import '_grid';\r\n\r\n.my-grid-class {\r\n  @include grid();\r\n}\r\n\r\n.my-pushed-column {\r\n  // This column will be 50% of its container width (in a 12 column grid) and\r\n  // 50% from the left of its container.\r\n  @column(6, (push: 6));\r\n}\r\n...\r\n```\r\n\r\n# Frequently-Asked Questions\r\n## Why Use Mixins Instead of Classes?\r\n\r\nA lot of well-known frameworks (Foundation5 and Bootstrap come to mind) use\r\nclasses to denote column widths:\r\n\r\n```html\r\n  <div class=\"col col-lg-3 col-md-6 col-sm-12\">\r\n      <div class=\"thumbnail\">\r\n          <div class=\"img skyline beijing\"></div>\r\n          <div class=\"desc\">\r\n              Neque porro quisquam est qui dolorem ipsum quia\r\n              dolor sit amet, consectetur, adipisci velit.\r\n              Neque porro quisquam est qui dolorem ipsum quia\r\n              dolor sit amet, consectetur, adipisci velit.\r\n          </div>\r\n      </div>\r\n    </div>\r\n```\r\n\r\nThis approach several __advantages__:\r\n\r\n1. It allows control over how an element will look at different screen widths\r\njust by adding a series of size-related classes.\r\n\r\n2. It allows for control over styling using CSS pseudo-selectors like\r\n``:last-of-type``, and ``[class*='col']`` to dynamically control styling of\r\ncolumns and rows without having to add additional classes like ``.col--last``.\r\n\r\n3. It clearly shows what classes affect what markup. It is easy to see what's\r\nstyling a block of HTML just by looking at the class list.\r\n\r\n4. Using the ``class`` attribute makes it easy to alter the layout of the page\r\nusing JavaScript.\r\n\r\nUnfortunately, it also has several __disadvantages__:\r\n\r\n1. Column widths cannot easily be stored in reusable variables without using\r\nsome kind of templating engine. This makes maintenance rather tedius if there\r\nis a lot of markup that shares the same ``col-`` classes.\r\n\r\n2. It's not semantic. Classes like ``col-sm-5`` don't do anything to help\r\n_describe_ the kind of data the markup represents. Semantic markup means\r\nusing CSS for styling and HTML for describing the data. Pure style-based\r\nclass names should be kept to a minimum if not eleminated all together.\r\n\r\n3. It causes code-bloat in the HTML and the CSS. The class-based approach to\r\ngrids causes a lot of extra markup (in the form of wrapper ``<div>``s),\r\nlarger HTML files (due to the length of class names), and larger CSS files\r\n(due to every grid-related class having to be generated up-front instead of\r\nas-needed). When this project was converted from a class-based to a mixin-based\r\napproach, combined file size was reduced by approximately 3KB.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}